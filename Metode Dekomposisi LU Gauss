import numpy as np

def LU_decomposition(A):
    n = len(A)
    L = np.eye(n)
    U = np.zeros((n, n))

    for k in range(n):
        U[k, k:] = A[k, k:] - L[k, :k] @ U[:k, k:]
        L[k+1:, k] = (A[k+1:, k] - L[k+1:, :k] @ U[:k, k]) / U[k, k]

    return L, U

def solve_inverse(A, b):
    A_inv = np.linalg.inv(A)
    x = A_inv @ b
    return x

# Testing the code
A = np.array([[2, -1, 1], [3, 3, 9], [3, 3, 5]])
b = np.array([5, 30, 8])
x_inv = solve_inverse(A, b)
print("Solusi x menggunakan matriks balikan:", x_inv)
