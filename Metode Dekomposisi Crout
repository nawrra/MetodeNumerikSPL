import numpy as np

def crout_decomposition_modified(A):
    n = len(A)
    L = np.zeros((n, n))
    U = np.zeros((n, n))

    for k in range(n):
        U[k, k:] = A[k, k:] - L[k, :k] @ U[:k, k:]
        L[k:, k] = (A[k:, k] - L[k:, :k] @ U[:k, k]) / U[k, k]

    return L, U

def solve_linear_equations_crout_modified(A, b):
    L, U = crout_decomposition_modified(A)
    y = np.linalg.solve(L, b)
    x = np.linalg.solve(U, y)
    return x

# Contoh penggunaan
A = np.array([[2, 1, -1],
              [-3, -1, 2],
              [-2, 1, 2]])

b = np.array([8, -11, -3])

x = solve_linear_equations_crout_modified(A, b)
print("Solusi dari sistem persamaan linear (modifikasi Crout):")
print(x)
